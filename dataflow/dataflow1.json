{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "emp_dataset",
						"type": "DatasetReference"
					},
					"name": "empsource"
				},
				{
					"dataset": {
						"referenceName": "DeptDataset",
						"type": "DatasetReference"
					},
					"name": "deptsource"
				},
				{
					"dataset": {
						"referenceName": "emp_dataset",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DeptDataset",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "empdeptoutputdataset",
						"type": "DatasetReference"
					},
					"name": "finaloutput"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText4",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "joinondeptid"
				},
				{
					"name": "RemoveColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          empname as string,",
				"          dob as string,",
				"          deptid as string,",
				"          salary as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> empsource",
				"source(output(",
				"          departmentid as string,",
				"          deptname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> deptsource",
				"source(output(",
				"          empid as string,",
				"          empname as string,",
				"          dob as string,",
				"          deptid as string,",
				"          salary as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          departmentid as string,",
				"          deptname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"empsource, deptsource join(deptid == departmentid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> joinondeptid",
				"derivedColumn1 select(mapColumn(",
				"          empid,",
				"          empname,",
				"          dob,",
				"          deptname,",
				"          salary",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
				"RemoveColumns1 filter(equals(deptname,'science')) ~> filter1",
				"joinondeptid derive(empname = upper(empname)) ~> derivedColumn1",
				"source1 aggregate(groupBy(deptid),",
				"     totalempcount = count(empid)) ~> aggregate1",
				"aggregate1, source2 join(deptid == departmentid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          deptname,",
				"          totalempcount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"empsource union(byName: true)~> union1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          anand as string,",
				"          m as string,",
				"          {34943954} as string",
				"     ),",
				"     partitionFileNames:['empdeptfinaloutput'],",
				"     dateFormat:'MM/dd/yyyy',",
				"     timestampFormat:'MM/dd/yyyy HH:mm:ss',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> finaloutput",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          anand as string,",
				"          m as string,",
				"          {34943954} as string",
				"     ),",
				"     partitionFileNames:['agreegrate.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}